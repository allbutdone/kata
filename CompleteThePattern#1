/*TASK:
Description:
NEXT KATA >

Task:
You have to write a function pattern which returns the following Pattern(See Pattern & Examples) upto n number of rows.

Note:Returning the pattern is not the same as Printing the pattern.
Rules/Note:
If n < 1 then it should return "" i.e. empty string.
There are no whitespaces in the pattern.
Pattern:
1
22
333
....
.....
nnnnnn
Examples:
pattern(5):

1
22
333
4444
55555
pattern(11):

1
22
333
4444
55555
666666
7777777
88888888
999999999
10101010101010101010
1111111111111111111111
Hint: Use \n in string to jump to next line

SOLUTION */










function pattern(n){
  let output
  n<1?output='':output='1'
  for(let x=2;x<=n;x++){
  output+=(`\n${`${x}`.repeat(x)}`) 
  }
  
   
 return output;
}






















/*TEST

Test Cases:
Test.assertEquals(pattern(1),"1");
Test.assertEquals(pattern(2),"1\n22");
Test.assertEquals(pattern(5),"1\n22\n333\n4444\n55555");
Test.assertEquals(pattern(0),"");
Test.assertEquals(pattern(-25),"");
Test.assertEquals(pattern(-99),"");

function solutionPattern(n){
 var output="";
 for(var i=1; i<=n; i++)
  {
    for(var j=1; j<=i; j++)
     {  
       output+=i;
      }
    output+="\n";
   }
 return output.slice(0,-1);
}

for(var i = 0; i < 20; i++) {
  var n = Math.floor(Math.random() * 99);
  Test.assertEquals(pattern(n), solutionPattern(n));
}
