/*TASK:
Given a number, write a function to output its reverse digits. (e.g. given 123 the answer is 321)

Numbers should preserve their sign; i.e. a negative number should still be negative when reversed.

Examples
 123 ->  321
-456 -> -654
1000 ->    1
SOLUTION */











function reverseNumber(n) {
  let t=n.toString().split("")
  let S=t.reverse().join("")
 return parseInt(t.includes("-")?"-"+S:S)

 
}


























/*TEST:

Test.describe("Sample tests", _=>{
  Test.assertEquals(reverseNumber(123), 321)
  Test.assertEquals(reverseNumber(-123), -321, 'Negative Numbers should be preserved')
  Test.assertEquals(reverseNumber(1000), 1, 'Should handle numbers ending with "0"')
  Test.assertEquals(reverseNumber(4321234), 4321234)
  Test.assertEquals(reverseNumber(5), 5)
  Test.assertEquals(reverseNumber(0), 0)
  Test.assertEquals(reverseNumber(98989898), 89898989)
});


Test.describe("Random test", _=>{
  let rnd = (a,b) => b ? a+rnd(b+1-a) : a ? ~~(rnd()*a) : Math.random();
  let rndOf = xx =>xx[rnd(xx.length)];
  
  let rndData = _ => [...Array(rnd(1,10))].map(_=>rnd(1,9));
  
  let tsts = [...Array(9)].map( rndData );
 
  it("Should reverse numbers", _=>{
    tsts.forEach( data => {
        let n = +data.join(''), exp = +data.slice().reverse().join('');
        Test.assertEquals(reverseNumber(n), exp);
      })
  });
  
  it("Should handle negative numbers", _=>{
    tsts.forEach( data => {
        let n = - +data.join(''), exp =  - +data.slice().reverse().join('');
//        console.log(n,exp)
        Test.assertEquals(reverseNumber(n), exp);
    })
  });
  
  it("Should handle 0(s)-ending-numbers", _=>{
    tsts.forEach( data => {
        let n = - +(data.join('')+"0".repeat(rnd(1,3))), exp =  - +data.slice().reverse().join('');
//        console.log(n, exp)
        Test.assertEquals(reverseNumber(n), exp);
      })
  });
  
});
