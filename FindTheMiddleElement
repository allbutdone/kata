/* TASK:
Description:
As a part of this Kata, you need to create a function that when provided with a triplet, returns the index of the numerical element that lies between the other two elements.

The input to the function will be an array of three distinct numbers (Haskell: a tuple).

For example:

gimme([2, 3, 1]) => 0
2 is the number that fits between 1 and 3 and the index of 2 in the input array is 0.

Another example (just to make sure it is clear):

gimme([5, 10, 14]) => 1
10 is the number that fits between 5 and 14 and the index of 10 in the input array is 1.
SOLUTION: */






var gimme = function (inputArray) {
 return inputArray.indexOf(inputArray.slice().sort((a,b)=>a-b)[1])
};











/* TEST:
Test.describe("Basic Test",function(){
Test.it("Tests for integers",function(){
Test.assertEquals(gimme([2, 3, 1]), 0, 'Finds the index of middle element');
Test.assertEquals(gimme([5, 10, 14]), 1, 'Finds the index of middle element');
})
Test.it("Tests for floats",function(){
Test.assertEquals(gimme([2.1, 3.2, 1.4]), 0, 'Finds the index of middle element for floats');
Test.assertEquals(gimme([5.9, 10.4, 14.2]), 1, 'Finds the index of middle element for floats');
})
Test.it("Tests for negative numbers",function(){
Test.assertEquals(gimme([-2, -3, -1]), 0, 'Finds the index of middle element for negative numbers');
Test.assertEquals(gimme([-5, -10, -14]), 1, 'Finds the index of middle element for negative numbers');
})
Test.it("Tests for mixed numbers",function(){
Test.assertEquals(gimme([-2, -3.2, 1]), 0, 'Finds the index of middle element for mixed numbers');
Test.assertEquals(gimme([-5.2, -10.6, 14]), 0, 'Finds the index of middle element for mixed numbers');
})
})

Test.describe("Random tests",function(){
function randint(a,b){return Math.ceil(Math.random()*(b-a)+1);}
gimmesol = function (inputArray) {
  return Array.prototype.slice.apply(inputArray).map(function (e, i) {
    return {
      e: e,
      i: i
    };
  }).sort(function (a, b) {
    return a.e - b.e;
  })[1].i;
};
for (k=0;k<40;k++){
  testmat=[];
  while (testmat.length<3){
    x=randint(0,100)-50;
    if (testmat.indexOf(x)==-1) testmat.push(x);
  }
  Test.it("Testing for for gimme(["+testmat.join(", ")+"])",function(){
    Test.assertEquals(gimme([].concat(testmat)),gimmesol(testmat.slice()),"Must work for random arrays too")
  })
}
})
